name: FOSS License Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clone and configure ScanCode Toolkit
        run: |
          git clone https://github.com/nexB/scancode-toolkit.git
          cd scancode-toolkit
          ./configure

      - name: Clean old scan output
        run: rm -f scan-output.json

      - name: Run ScanCode license scan
        run: |
          cd scancode-toolkit
          ./scancode \
            --license \
            --json-pp ../scan-output.json \
            ../src/uuid/src

      - name: Show detected licenses with file paths
        run: |
          echo " Detected licenses:"
          jq -r '.license_detections[] | "\(.license_expression) :: \(.location.path)""' scan-output.json | sort -u

      - name: Check for risky licenses
        run: |
          echo " Checking for risky licenses..."

          risky_found=0

          jq -c '.license_detections[]' scan-output.json | while read -r detection; do
            expr=$(echo "$detection" | jq -r '.license_expression')
            file=$(echo "$detection" | jq -r '.location.path')
            normalized=$(echo "$expr" | tr '[:upper:]' '[:lower:]')

            # Ignore dual-licensed expressions
            if echo "$normalized" | grep -q " or "; then
              echo " Ignored dual-licensed: $expr in $file"
              continue
            fi

            # Flag risky licenses (GPL/AGPL)
            if echo "$normalized" | grep -E 'gpl|agpl'; then
              echo " Risky license found: $expr in $file"
              risky_found=1
            fi
          done

          if [ "$risky_found" -eq 1 ]; then
            echo " Build failed due to risky licenses."
            exit 1
          else
            echo " No risky licenses found"
          fi
